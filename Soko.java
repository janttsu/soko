/* Soko 1.8.2004 Johannes Söderlund */import java.awt.*;import javax.swing.*;import java.awt.event.*;import java.util.*;import java.io.*;class Tieto extends JFrame {    public Tieto() {        setTitle("Tietoja");        setSize(300, 220);        setResizable(false);        setDefaultCloseOperation(DISPOSE_ON_CLOSE);        Toolkit tk = Toolkit.getDefaultToolkit();        setLocation(150, 150);    }}public class Soko implements ActionListener, KeyListener {    public static void main(String[] args) {        Soko a = new Soko();        a.open();    }    final static String nimi = "Soko";    final static String versio = "1.8.2004";    JMenuItem avaa = new JMenuItem("Avaa taso");    JMenuItem uusi = new JMenuItem("Aloita alusta");    JMenuItem pakki = new JMenuItem("Peruuta siirto");    JMenuItem lopeta = new JMenuItem("Lopeta");    JMenuItem tietoja = new JMenuItem("Tietoja");    JButton ok = new JButton("OK");    JFrame tieto = new Tieto();    static JFrame frame = new Kehys();    int x;    static byte[][] p = new byte[15][15];    static byte[][] parkit = new byte[15][15];    byte[][] takaisin = new byte[15][15];    byte ukko1;    byte ukko2;    JPanel pa = new JPanel(new GridLayout(1, 0));    static int siirtoja;    static boolean loppu = true;    static byte tilanne;    String f;    static String filu;    String virhe;    public void open() {        // ------------------------------------------------- valikot        JMenuBar menu = new JMenuBar();        JMenu peli = new JMenu("Peli"); // pelivalikko        avaa.addActionListener(this);        peli.add(avaa);        uusi.addActionListener(this); // uusi peli        peli.add(uusi);        pakki.addActionListener(this); // uusi peli        peli.add(pakki);        lopeta.addActionListener(this); // lopeta        peli.add(lopeta);        menu.add(peli);        //        JMenu ohje = new JMenu("Ohje"); // ohje        tietoja.addActionListener(this); // tietoja        ohje.add(tietoja);        menu.add(ohje);        frame.setJMenuBar(menu);        // ------------------------------------------------- koko        Container c = frame.getContentPane();        frame.setContentPane(c);        c.setLayout(new GridLayout(1, 0));        pa.add(new Ruutu());        pa.setPreferredSize(new Dimension(385, 405));        c.add(pa);        frame.addKeyListener(this);        frame.pack();        // ------------------------------------------------- käyntiin        tilanne = 0;        pakki.setEnabled(false);        uusi.setEnabled(false);        pa.repaint();        frame.setVisible(true);    }    public void piirra() {        pa.repaint();        hae();        loppu = true;        for (int a = 0; a < p.length; a++) {            for (int b = 0; b < p.length; b++) {                if (p[a][b] == 3) {                    loppu = false;                }                if (ukko1 == a && ukko2 == b) {                    if (parkit[a][b] == 3) {                        loppu = false;                    }                }            }        }    }    public void hae() {        for (int a = 0; a < p.length; a++) {            for (int b = 0; b < p.length; b++) {                if (p[a][b] == 5) {                    ukko1 = (byte) a;                    ukko2 = (byte) b;                }            }        }    }    public void talteen() {        for (int a = 0; a < p.length; a++) {            for (int b = 0; b < p.length; b++) {                takaisin[a][b] = p[a][b];            }        }    }    public void siirto() {        siirtoja++;        pakki.setEnabled(true);    }    public void siirra(byte o1, byte o2, byte o3, byte o4) {        if (p[ukko1 + o1][ukko2 + o3] == 1) {            talteen();            p[ukko1 + o1][ukko2 + o3] = 5;            if (parkit[ukko1][ukko2] == 3) {                p[ukko1][ukko2] = 3;            } else {                p[ukko1][ukko2] = 1;            }            siirto();        } else if (p[ukko1 + o1][ukko2 + o3] == 4) {            if (p[ukko1 + o2][ukko2 + o4] == 1) {                talteen();                if (parkit[ukko1][ukko2] == 3) {                    p[ukko1][ukko2] = 3;                } else {                    p[ukko1][ukko2] = 1;                }                p[ukko1 + o1][ukko2 + o3] = 5;                p[ukko1 + o2][ukko2 + o4] = 4;                siirto();            } else if (p[ukko1 + o2][ukko2 + o4] == 3) {                talteen();                if (parkit[ukko1][ukko2] == 3) {                    p[ukko1][ukko2] = 3;                } else {                    p[ukko1][ukko2] = 1;                }                p[ukko1 + o1][ukko2 + o3] = 5;                p[ukko1 + o2][ukko2 + o4] = 4;                siirto();            }        } else if (p[ukko1 + o1][ukko2 + o3] == 3) {            talteen();            p[ukko1 + o1][ukko2 + o3] = 5;            if (parkit[ukko1][ukko2] == 3) {                p[ukko1][ukko2] = 3;            } else {                p[ukko1][ukko2] = 1;            }            siirto();        }        piirra();    }    public void keyPressed(KeyEvent e) {        if (loppu == false) {            int key = e.getKeyCode();            if (key == KeyEvent.VK_LEFT) {                siirra((byte) 0, (byte) 0, (byte) -1, (byte) -2);            } else if (key == KeyEvent.VK_RIGHT) {                siirra((byte) 0, (byte) 0, (byte) 1, (byte) 2);            } else if (key == KeyEvent.VK_UP) {                siirra((byte) -1, (byte) -2, (byte) 0, (byte) 0);            } else if (key == KeyEvent.VK_DOWN) {                siirra((byte) 1, (byte) 2, (byte) 0, (byte) 0);            }        }    }    public void keyReleased(KeyEvent e) {}    public void keyTyped(KeyEvent e) {}    public void haeKentta() {        String s = "";        String t;        try {            BufferedReader br = new BufferedReader(new FileReader(f));            for (int a = 0; a < Soko.p.length; a++) {                s = br.readLine();                StringTokenizer st = new StringTokenizer(s, " ");                for (int b = 0; b < Soko.p.length; b++) {                    t = st.nextToken();                    if (t.equals("'")) {                        p[a][b] = 0;                        parkit[a][b] = 0;                    } else if (t.equals(".")) {                        p[a][b] = 1;                        parkit[a][b] = 0;                    } else if (t.equals("x")) {                        p[a][b] = 2;                        parkit[a][b] = 0;                    } else if (t.equals("o")) {                        p[a][b] = 3;                        parkit[a][b] = 3;                    } else if (t.equals("a")) {                        p[a][b] = 4;                        parkit[a][b] = 0;                    } else if (t.equals("@")) {                        p[a][b] = 4;                        parkit[a][b] = 3;                    } else if (t.equals("+")) {                        p[a][b] = 5;                        parkit[a][b] = 0;                    } else if (t.equals("€")) {                        p[a][b] = 5;                        parkit[a][b] = 3;                    }                }            }        } catch (IOException e) {}        siirtoja = 0;        tilanne = 1;        loppu = false;        uusi.setEnabled(true);        piirra();    }    public void avaa() {        File dir2 = new File("tasot");        if (!dir2.exists()) {            dir2.mkdir();        }        FileDialog fd = new FileDialog(frame, "Avaa taso...", FileDialog.LOAD);        String dir = "tasot";        fd.setDirectory(dir);        fd.setVisible(true);        dir = fd.getDirectory();        filu = fd.getFile();        f = dir + File.separator + filu;        pakki.setEnabled(false);        haeKentta();        frame.requestFocus();    }    public void actionPerformed(ActionEvent e) {        Object sender = e.getSource();        if (sender == avaa) {            if (tilanne == 1) {                Object[] options = { "Kyllä", "Ei"};                int n = JOptionPane.showOptionDialog(frame,                        "Haluatko keskeyttää pelin?", "Avaa taso?",                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,                        null, // don't use a custom Icon                        options, // the titles of buttons                        options[0]); // default button title                switch (n) {                case JOptionPane.YES_OPTION:                    avaa();                case JOptionPane.CLOSED_OPTION:                    break; // Don't quit!                }            } else {                avaa();            }        } else if (sender == uusi) {            Object[] options = { "Kyllä", "Ei"};            int n = JOptionPane.showOptionDialog(frame,                    "Haluatko keskeyttää pelin?", "Aloita uudestaan?",                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,                    null, // don't use a custom Icon                    options, // the titles of buttons                    options[0]); // default button title            switch (n) {            case JOptionPane.YES_OPTION:                haeKentta();            case JOptionPane.CLOSED_OPTION:                break; // Don't quit!            }        } else if (sender == pakki) {            for (int a = 0; a < p.length; a++) {                for (int b = 0; b < p.length; b++) {                    p[a][b] = takaisin[a][b];                }            }            siirtoja++;            piirra();            pakki.setEnabled(false);        } else if (sender == lopeta) {            if (tilanne == 1) {                Object[] options = { "Kyllä", "Ei"};                int n = JOptionPane.showOptionDialog(frame, "Haluatko lopettaa?",                        "Lopeta?", JOptionPane.YES_NO_OPTION,                        JOptionPane.QUESTION_MESSAGE, null, // ei mitään muuta kuvaa                        options, // painikkeiden tekstit                        options[0]); // oletuspainike                switch (n) {                case JOptionPane.YES_OPTION:                    System.exit(0);                case JOptionPane.CLOSED_OPTION:                    break; // Don't quit!                }            } else {                System.exit(0);            }        } else if (sender == ok) {            tieto.dispose();        } else if (sender == tietoja) {            if (tietoja.isShowing() == false) {                Container c = tieto.getContentPane();                c.setLayout(null);                tieto.setContentPane(c);                JEditorPane t = new JEditorPane();                Dimension d = tieto.getSize();                t.setBounds(0, 0, d.width, d.height - 75);                t.setEditable(false);                t.setContentType("text/html");                t.setText(                        "<font face=verdana size=7><center><b>" + nimi                        + "</b></font>"                        + "<font face=verdana size=3><br>versio " + versio                        + "<p>© 2004 Johannes Söderlund"                        + "<p>https://github.com/tanaos/soko"                        + "<br>soko@soderlund.in</font>");                c.add(t);                x = (d.width - 100) / 2;                ok.setBounds(x, d.height - 65, 100, 25);                ok.setBackground(Color.white);                ok.addActionListener(this);                c.add(ok);                c.setBackground(Color.white);                tieto.setVisible(true);            }        }    }}class Ruutu extends JPanel {    public void paintComponent(Graphics g) {        super.paintComponent(g);        Dimension d = getSize();        int l = 25;        g.setColor(Color.white);        g.fillRect(0, 0, d.width, d.height);        if (Soko.tilanne == 0) {            Image logo = Toolkit.getDefaultToolkit().getImage(                    Soko.class.getResource("logo.gif"));            g.drawImage(logo, (d.width - 173) / 2, (d.height - 78) / 2, this);        } else if (Soko.tilanne == 1) {            for (int a = 0; a < Soko.p.length; a++) {                for (int b = 0; b < Soko.p.length; b++) {                    // tyhjä                    if (Soko.p[a][b] == 0) {                        g.setColor(Color.white);                        g.fillRect(b * l + 5, a * l + 5, l, l);                        g.setColor(new Color(192, 192, 192));                        g.drawRect(b * l + 5, a * l + 5, l, l);                        // lattia                    } else if (Soko.p[a][b] == 1) {                        g.setColor(new Color(255, 255, 148));                        g.fillRect(b * l + 5, a * l + 5, l, l);                        // seinä                    } else if (Soko.p[a][b] == 2) {                        g.setColor(new Color(192, 0, 0));                        g.fillRect(b * l + 5, a * l + 5, l, l);                        g.setColor(Color.black);                        // kahdet                        g.drawRect(b * l + 5, a * l + 5, 12, 3); // 1                        g.drawRect(b * l + 5 + 12, a * l + 5, 12, 3);                        g.drawRect(b * l + 5, a * l + 5 + 6, 12, 3); // 2                        g.drawRect(b * l + 5 + 12, a * l + 5 + 6, 12, 3);                        g.drawRect(b * l + 5, a * l + 5 + 12, 12, 3); // 3                        g.drawRect(b * l + 5 + 12, a * l + 5 + 12, 12, 3);                        g.drawRect(b * l + 5, a * l + 5 + 18, 12, 3); // 4                        g.drawRect(b * l + 5 + 12, a * l + 5 + 18, 12, 3);                        // kolmet                        g.drawRect(b * l + 5, a * l + 5 + 3, 7, 3); // 1                        g.drawRect(b * l + 5 + 7, a * l + 5 + 3, 11, 3);                        g.drawRect(b * l + 5 + 18, a * l + 5 + 3, 6, 3);                        g.drawRect(b * l + 5, a * l + 5 + 9, 7, 3); // 2                        g.drawRect(b * l + 5 + 7, a * l + 5 + 9, 11, 3);                        g.drawRect(b * l + 5 + 18, a * l + 5 + 9, 6, 3);                        g.drawRect(b * l + 5, a * l + 5 + 15, 7, 3); // 3                        g.drawRect(b * l + 5 + 7, a * l + 5 + 15, 11, 3);                        g.drawRect(b * l + 5 + 18, a * l + 5 + 15, 6, 3);                        g.drawRect(b * l + 5, a * l + 5 + 21, 7, 3); // 4                        g.drawRect(b * l + 5 + 7, a * l + 5 + 21, 11, 3);                        g.drawRect(b * l + 5 + 18, a * l + 5 + 21, 6, 3);                        // parkki                    } else if (Soko.p[a][b] == 3) {                        g.setColor(new Color(255, 255, 148));                        g.fillRect(b * l + 5, a * l + 5, l, l);                        g.setColor(Color.black);                        // kulmat vaakatasossa                        g.drawLine(b * l + 5 + 1, a * l + 5 + 1, b * l + 5 + 5,                                a * l + 5 + 1);                        g.drawLine(b * l + 5 + 19, a * l + 5 + 1, b * l + 5 + 23,                                a * l + 5 + 1);                        g.drawLine(b * l + 5 + 1, a * l + 5 + 23, b * l + 5 + 5,                                a * l + 5 + 23);                        g.drawLine(b * l + 5 + 19, a * l + 5 + 23,                                b * l + 5 + 23, a * l + 5 + 23);                        // kulmat alas                        g.drawLine(b * l + 5 + 1, a * l + 5 + 1, b * l + 5 + 1,                                a * l + 5 + 5);                        g.drawLine(b * l + 5 + 23, a * l + 5 + 1, b * l + 5 + 23,                                a * l + 5 + 5);                        g.drawLine(b * l + 5 + 1, a * l + 5 + 19, b * l + 5 + 1,                                a * l + 5 + 23);                        g.drawLine(b * l + 5 + 23, a * l + 5 + 19,                                b * l + 5 + 23, a * l + 5 + 23);                        // välit vaakatasossa                        g.drawLine(b * l + 5 + 11, a * l + 5 + 1, b * l + 5 + 13,                                a * l + 5 + 1);                        g.drawLine(b * l + 5 + 11, a * l + 5 + 23,                                b * l + 5 + 13, a * l + 5 + 23);                        // x                        g.drawLine(b * l + 5 + 10, a * l + 5 + 10,                                b * l + 5 + 14, a * l + 5 + 14);                        g.drawLine(b * l + 5 + 10, a * l + 5 + 14,                                b * l + 5 + 14, a * l + 5 + 10);                        // laatikko                    } else if (Soko.p[a][b] == 4) {                        g.setColor(Color.black);                        // vasen ja oikea pitkä                        g.drawRect(b * l + 5, a * l + 5, 3, l - 1);                        g.drawRect(b * l + 5 + 21, a * l + 5, 3, l - 1);                        // täytteet                        g.setColor(new Color(206, 97, 0));                        g.fillRect(b * l + 5 + 1, a * l + 5 + 1, 2, l - 2);                        g.fillRect(b * l + 5 + 22, a * l + 5 + 1, 2, l - 2);                        // pienet poikittaiset                        g.setColor(Color.black);                        g.drawRect(b * l + 5 + 3, a * l + 5, 18, 4);                        g.drawRect(b * l + 5 + 3, a * l + 5 + 4, 18, 4);                        g.drawRect(b * l + 5 + 3, a * l + 5 + 8, 18, 4);                        g.drawRect(b * l + 5 + 3, a * l + 5 + 12, 18, 4);                        g.drawRect(b * l + 5 + 3, a * l + 5 + 16, 18, 4);                        g.drawRect(b * l + 5 + 3, a * l + 5 + 20, 18, 4);                        g.drawRect(b * l + 5 + 3, a * l + 5 + 24, 18, 4);                        g.drawRect(b * l + 5 + 3, a * l + 5 + 28, 18, 4);                        // täytteet                        g.setColor(new Color(206, 97, 0));                        g.fillRect(b * l + 5 + 4, a * l + 5 + 1, 17, 3);                        g.fillRect(b * l + 5 + 4, a * l + 5 + 5, 17, 3);                        g.fillRect(b * l + 5 + 4, a * l + 5 + 9, 17, 3);                        g.fillRect(b * l + 5 + 4, a * l + 5 + 13, 17, 3);                        g.fillRect(b * l + 5 + 4, a * l + 5 + 17, 17, 3);                        g.fillRect(b * l + 5 + 4, a * l + 5 + 21, 17, 3);                        g.fillRect(b * l + 5 + 4, a * l + 5 + 25, 17, 3);                        g.fillRect(b * l + 5 + 4, a * l + 5 + 29, 17, 3);                        if (Soko.parkit[a][b] == 3) {                            g.setColor(Color.white);                            g.fillRect(b * l + 5 + 6, a * l + 5 + 6, 11, 7);                            g.setColor(Color.black);                            g.drawLine(b * l + 5 + 7, a * l + 5 + 7,                                    b * l + 5 + 15, a * l + 5 + 7);                            g.drawLine(b * l + 5 + 7, a * l + 5 + 9,                                    b * l + 5 + 15, a * l + 5 + 9);                            g.drawLine(b * l + 5 + 7, a * l + 5 + 11,                                    b * l + 5 + 15, a * l + 5 + 11);                        }                        // ukko                    } else if (Soko.p[a][b] == 5) {                        g.setColor(new Color(255, 255, 148));                        g.fillRect(b * l + 5, a * l + 5, l, l);                        if (Soko.parkit[a][b] == 3) {                            g.setColor(Color.black);                            // kulmat vaakatasossa                            g.drawLine(b * l + 5 + 1, a * l + 5 + 1,                                    b * l + 5 + 5, a * l + 5 + 1);                            g.drawLine(b * l + 5 + 19, a * l + 5 + 1,                                    b * l + 5 + 23, a * l + 5 + 1);                            g.drawLine(b * l + 5 + 1, a * l + 5 + 23,                                    b * l + 5 + 5, a * l + 5 + 23);                            g.drawLine(b * l + 5 + 19, a * l + 5 + 23,                                    b * l + 5 + 23, a * l + 5 + 23);                            // kulmat alas                            g.drawLine(b * l + 5 + 1, a * l + 5 + 1,                                    b * l + 5 + 1, a * l + 5 + 5);                            g.drawLine(b * l + 5 + 23, a * l + 5 + 1,                                    b * l + 5 + 23, a * l + 5 + 5);                            g.drawLine(b * l + 5 + 1, a * l + 5 + 19,                                    b * l + 5 + 1, a * l + 5 + 23);                            g.drawLine(b * l + 5 + 23, a * l + 5 + 19,                                    b * l + 5 + 23, a * l + 5 + 23);                            // välit vaakatasossa                            g.drawLine(b * l + 5 + 11, a * l + 5 + 1,                                    b * l + 5 + 13, a * l + 5 + 1);                            g.drawLine(b * l + 5 + 11, a * l + 5 + 23,                                    b * l + 5 + 13, a * l + 5 + 23);                            // x                            g.drawLine(b * l + 5 + 10, a * l + 5 + 10,                                    b * l + 5 + 14, a * l + 5 + 14);                            g.drawLine(b * l + 5 + 10, a * l + 5 + 14,                                    b * l + 5 + 14, a * l + 5 + 10);                        }                        g.setColor(Color.black);                        g.drawRect(b * l + 5 + 1, a * l + 5 + 8, 7, 8);                        g.drawRect(b * l + 5 + 8, a * l + 5 + 1, 8, 22);                        g.drawRect(b * l + 5 + 16, a * l + 5 + 8, 7, 8);                        g.setColor(new Color(0, 128, 0));                        g.fillRect(b * l + 5 + 2, a * l + 5 + 9, 6, 7);                        g.fillRect(b * l + 5 + 9, a * l + 5 + 2, 7, 21);                        g.fillRect(b * l + 5 + 17, a * l + 5 + 9, 6, 7);                    }                }                String s;                Font f = new Font("Verdana", Font.PLAIN, 14);                FontMetrics fm = g.getFontMetrics(f);                // tason teksti                g.setFont(f);                g.setColor(Color.black);                s = "Taso: " + Soko.filu;                g.drawString(s, d.width - fm.stringWidth(s) - 5, 400);                // siirtoja                g.setFont(f);                s = "Siirtoja: " + Soko.siirtoja;                g.setFont(f);                g.drawString(s, 5, 400);            }        } else if (Soko.tilanne == 2) {}    }}class Kehys extends JFrame {    public Kehys() {        setTitle("Soko");        setResizable(false);        setDefaultCloseOperation(EXIT_ON_CLOSE);        Toolkit tk = Toolkit.getDefaultToolkit();        setLocation(100, 100);    }}